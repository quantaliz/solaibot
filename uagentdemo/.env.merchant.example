# =============================================================================
# MERCHANT AGENT CONFIGURATION (for merchant.py)
# =============================================================================
# This configuration file is for the merchant agent that offers premium
# resources and accepts blockchain payments via the x402 protocol.
#
# Copy this file to .env when running the merchant:
#   cp .env.merchant.example .env
#
# IMPORTANT: This project is part of the ASI Agents Track Hackathon
# https://earn.superteam.fun/listing/asi-agents-track/
# =============================================================================

# -----------------------------------------------------------------------------
# Agent Identity
# -----------------------------------------------------------------------------
# These settings define your merchant agent's identity on the uAgent network

AGENT_NAME=payment_merchant_agent
# Description: Friendly name for your merchant agent
# Used in logs and for identification
# Can be any alphanumeric string

AGENT_SEED=merchant_agent_secure_seed_phrase_12345
# Description: Cryptographic seed that determines your merchant's uAgent address
# CRITICAL: Keep this secret and unique
# Changing seed = different agent address
# IMPORTANT: This must be DIFFERENT from your Agentverse proxy seed (if using proxy mode)
# Use a random phrase or UUID for security

AGENT_NETWORK=testnet
# Description: uAgent network to connect to
# Options:
#   - testnet: Free Fetch.ai testnet (recommended for development)
#   - mainnet: Production Fetch.ai network (requires FET tokens)

# -----------------------------------------------------------------------------
# Agent Network Configuration
# -----------------------------------------------------------------------------
# Controls how your merchant agent communicates on the network

AGENT_ENDPOINT_PORT=8000
# Description: Local port for merchant agent
# Default: 8000 (clients typically use 8001+)
# Note: Only used for local mode status, not for mailbox communication

# IMPORTANT: Do NOT set AGENT_ENDPOINT when using Agentverse proxy mode!
# AGENT_ENDPOINT=localhost  ← REMOVE THIS or leave blank for proxy mode
#
# Why? Setting endpoint overrides mailbox functionality and causes
# "Failed to dispatch envelope" errors. When AGENTVERSE=true, the agent
# uses Agentverse's mailbox system instead of direct HTTP endpoints.

# -----------------------------------------------------------------------------
# Agentverse Proxy Configuration (OPTIONAL)
# -----------------------------------------------------------------------------
# Enable this for 24/7 availability using Agentverse proxy forwarding
#
# ARCHITECTURE: Two-Agent Proxy System
# =====================================
#
# When AGENTVERSE=true, you run TWO separate agents:
#
# 1. THIS MERCHANT AGENT (merchant.py)
#    - Runs on YOUR infrastructure (local machine, VPS, cloud server)
#    - Has full access to x402, Solana, EVM libraries
#    - Processes payments and verifies blockchain transactions
#    - Connects to Agentverse via MAILBOX system (not direct HTTP)
#    - Different seed/address from proxy
#
# 2. AGENTVERSE PROXY AGENT (agentverse-proxy.py)
#    - Runs on AGENTVERSE cloud (24/7 managed hosting)
#    - Lightweight message forwarder only
#    - Receives client requests and forwards via mailbox
#    - Returns responses from local merchant to clients
#    - Different seed/address from merchant
#
# Communication Flow:
#   Client → Agentverse Proxy (cloud)
#          ↓ (mailbox)
#   Local Merchant (your infrastructure) → Process & Verify Payment
#          ↓ (mailbox)
#   Agentverse Proxy → Client (deliver resource)
#
# Mailbox System:
#   - Merchant creates outbound connection to Agentverse mailbox servers
#   - Messages are queued and delivered via this persistent connection
#   - Works behind NAT/firewall (no port forwarding needed)
#   - No public endpoint required
#   - Async message delivery with automatic retries

AGENTVERSE=false
# Description: Enable Agentverse proxy mode with mailbox communication
# Options:
#   - false: Local mode - direct peer-to-peer agent communication
#     * Merchant receives messages via HTTP endpoint
#     * Requires AGENT_ENDPOINT to be accessible
#     * Good for development and testing
#     * Merchant only receives messages when running
#
#   - true: Proxy mode - mailbox communication via Agentverse
#     * Merchant connects to Agentverse mailbox servers
#     * Receives messages forwarded from Agentverse proxy
#     * Works behind NAT/firewall
#     * Enables 24/7 message reception via proxy
#     * DO NOT set AGENT_ENDPOINT when using this mode!
#
# Setup for Proxy Mode:
#   1. Set AGENTVERSE=true here
#   2. Run merchant.py locally to get its agent address
#   3. Deploy agentverse-proxy.py to Agentverse
#   4. Configure proxy with LOCAL_MERCHANT_ADDRESS (from step 2)
#   5. Get proxy address from Agentverse logs
#   6. Optionally set AGENTVERSE_AGENT_ADDRESS below
#   7. Clients send to proxy address (NOT this merchant's address)

AGENTVERSE_AGENT_ADDRESS=
# Description: Address of your Agentverse proxy agent (optional)
# Format: agent1q... (70+ characters)
# Purpose: Used for validation and logging only
# Get from: Agentverse dashboard after deploying agentverse-proxy.py
# Leave blank if not using proxy mode
#
# Example: agent1q2d3chh0dsjpjg8cf5a4g8tx5hl4gn2c89jvt7atz42xg2zx4h6f5vupkxj

# -----------------------------------------------------------------------------
# Payment Configuration (REQUIRED)
# -----------------------------------------------------------------------------
# Your blockchain wallet where payments will be received

MERCHANT_AGENT_ADDRESS=GDw3EAgyNqv28cn3dH4KuLxxcNPJhunMmx1jBMJTyEAv
# Description: YOUR blockchain wallet address for receiving payments
# CRITICAL: This is where clients send blockchain payments
# REQUIRED: Must be set for merchant to start
#
# For Solana (devnet/mainnet):
#   - Base58-encoded public key (like example above)
#   - Get from: Phantom wallet, Solflare, Solana CLI
#   - For devnet testing: Get free SOL from https://faucet.solana.com/
#
# For EVM chains (Base, Ethereum):
#   - Format: 0x followed by 40 hexadecimal characters
#   - Example: 0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb0
#   - Get from: MetaMask, Coinbase Wallet, etc.
#
# SECURITY WARNING:
#   - You must own the private key for this address
#   - Never share your private key (not needed in this config)
#   - Use dedicated wallet for testing (not your main wallet)
#   - For production: Use hardware wallet or secure key management

FACILITATOR_URL=https://facilitator.payai.network
# Description: PayAI facilitator endpoint for payment verification
# Default: https://facilitator.payai.network (official PayAI facilitator)
# Purpose: Verifies and settles blockchain payments without gas fees
# Note: Custom facilitator URL can be used for testing

PAYMENT_NETWORK=solana-devnet
# Description: Blockchain network for payments
# IMPORTANT: Clients must use the same network!
#
# Solana Networks:
#   - solana-devnet: Solana testnet (recommended for development)
#     * Free SOL from https://faucet.solana.com/
#     * No real money at risk
#     * Faster for testing
#
#   - solana-mainnet: Solana production network
#     * Real SOL and tokens
#     * Use for production only
#
# EVM Networks (require x402 package):
#   - base-sepolia: Base testnet
#     * Free test ETH from Coinbase faucet
#     * Compatible with x402 SDK
#
#   - base-mainnet: Base production network
#     * Real ETH and tokens
#     * Use for production only

# =============================================================================
# DEPLOYMENT MODES
# =============================================================================
#
# MODE 1: Local Development (Direct Communication)
# ------------------------------------------------
# Configuration:
#   AGENTVERSE=false
#   Do not set AGENT_ENDPOINT (leave commented out)
#
# Usage:
#   1. cp .env.merchant.example .env
#   2. Edit MERCHANT_AGENT_ADDRESS with your wallet
#   3. uv run src/merchant.py
#   4. Copy agent address from logs
#   5. Configure client with this address
#   6. uv run src/client.py
#
# Characteristics:
#   ✅ Simple setup
#   ✅ Fast development cycle
#   ✅ No external dependencies
#   ❌ Merchant only receives when running
#   ❌ Requires both agents on same network or public endpoints
#
# Best for:
#   - Local testing and development
#   - Quick prototyping
#   - Learning the protocol
#
# MODE 2: Production with Agentverse Proxy (Mailbox Communication)
# -----------------------------------------------------------------
# Configuration:
#   AGENTVERSE=true
#   Do NOT set AGENT_ENDPOINT (critical!)
#   AGENTVERSE_AGENT_ADDRESS=<proxy-address> (optional)
#
# Setup Process:
#   1. Configure this merchant:
#      cp .env.merchant.example .env
#      Edit MERCHANT_AGENT_ADDRESS
#      Set AGENTVERSE=true
#
#   2. Start merchant locally:
#      uv run src/merchant.py
#      Copy "Agent address: agent1qtem7xxuw9..." from logs
#
#   3. Deploy proxy to Agentverse:
#      - Go to https://agentverse.ai
#      - Create new agent
#      - Upload agentverse-proxy.py and models.py
#      - Set secret: LOCAL_MERCHANT_ADDRESS=<address-from-step-2>
#      - Deploy
#
#   4. Get proxy address:
#      Check Agentverse logs for "Proxy Address: agent1q..."
#      Optionally set AGENTVERSE_AGENT_ADDRESS in .env
#
#   5. Verify health check:
#      Agentverse logs should show "✅ HEALTH CHECK PASSED!"
#      Local merchant logs show "✅ Health check response sent"
#
#   6. Configure clients:
#      MERCHANT_UAGENT_ADDRESS=<proxy-address-from-step-4>
#      MERCHANT_AGENT_ADDRESS=<your-blockchain-wallet>
#
# Characteristics:
#   ✅ 24/7 message reception via Agentverse
#   ✅ Works behind NAT/firewall (no port forwarding)
#   ✅ Full x402 + Solana + EVM support (local processing)
#   ✅ Secure (payment processing stays on your infrastructure)
#   ✅ Scalable (can run multiple local merchants)
#   ❌ More complex setup (two agents to manage)
#   ❌ Requires maintaining local merchant uptime
#
# Best for:
#   - Production deployments
#   - 24/7 service availability
#   - Merchants behind firewalls
#   - Full feature support (all payment networks)
#
# =============================================================================
# PREMIUM RESOURCES
# =============================================================================
#
# This merchant offers three example premium resources:
#
# 1. premium_weather ($0.001)
#    - Real-time weather data with forecasts
#    - Air quality index and UV index
#    - 3-day forecast
#
# 2. premium_data (0.01 USDC)
#    - Business analytics dashboard
#    - User metrics and conversion rates
#    - Growth insights
#
# 3. premium_api ($0.005)
#    - Premium API access
#    - Higher rate limits (1000 req/hour)
#    - Advanced endpoints
#
# Add custom resources by editing merchant.py:
#   - Define pricing in get_price_for_resource()
#   - Define data in get_premium_resource()
#   - Restart merchant (changes take effect immediately)
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Error: "MERCHANT_AGENT_ADDRESS not configured"
# → Set MERCHANT_AGENT_ADDRESS to your blockchain wallet
#
# Error: "x402 package not installed"
# → Install with: uv add x402
# → Only needed for EVM payments (Base, Ethereum)
# → Not needed for Solana payments
#
# Error: "Failed to dispatch envelope" + "Endpoint configuration overrides mailbox"
# → You set both endpoint and AGENTVERSE=true
# → Remove AGENT_ENDPOINT setting (or comment it out)
# → Restart merchant
#
# Warning: "Endpoint configuration overrides mailbox setting"
# → Same as above - do not set AGENT_ENDPOINT in proxy mode
#
# Error: Health check never passes (Agentverse proxy)
# → Verify AGENTVERSE=true in merchant .env
# → Check LOCAL_MERCHANT_ADDRESS in Agentverse matches exactly
# → Ensure merchant is running locally
# → Verify no endpoint override (see above)
#
# Error: "Payment verification failed"
# → Check Solana wallet has sufficient balance
# → Verify PAYMENT_NETWORK matches client setting
# → Check transaction was broadcast to correct network
# → View transaction on explorer (Solana Explorer / BaseScan)
#
# Error: Client can't connect
# → Verify both agents on same uAgent network (testnet/mainnet)
# → Check client has correct merchant address
# → Ensure merchant is running
# → For proxy mode: Use proxy address, not local merchant address
#
# =============================================================================
# SECURITY BEST PRACTICES
# =============================================================================
#
# ⚠️  NEVER commit .env to version control (already in .gitignore)
# ⚠️  Keep AGENT_SEED secret and unique
# ⚠️  Use different seeds for merchant and proxy (two separate agents)
# ⚠️  Keep MERCHANT_AGENT_ADDRESS private key secure (not in this file)
# ⚠️  Use testnet/devnet for development (no real money at risk)
# ⚠️  For production: Use hardware wallet or key management system
# ⚠️  Monitor payment transactions on blockchain explorer
# ⚠️  Set up alerts for unusual payment activity
# ⚠️  Implement rate limiting for production deployments
# ⚠️  Use persistent storage (not in-memory) for production
# ⚠️  Add payment ID expiration (currently no TTL)
#
# =============================================================================
# HACKATHON SUBMISSION
# =============================================================================
#
# This project demonstrates autonomous agent commerce using:
#   ✅ x402 payment protocol (HTTP 402 revival)
#   ✅ Fetch.ai uAgents framework
#   ✅ Solana blockchain payments (devnet)
#   ✅ PayAI facilitator (zero gas fees)
#   ✅ Agentverse proxy architecture
#   ✅ Multi-network support (Solana + EVM)
#
# Hackathon: ASI Agents Track
# URL: https://earn.superteam.fun/listing/asi-agents-track/
#
# Future enhancements:
#   - Persistent storage with PostgreSQL/Redis
#   - Payment ID expiration and cleanup
#   - Dynamic pricing based on demand
#   - Subscription-based access models
#   - Multi-currency support
#   - Advanced rate limiting
#   - Analytics dashboard
#   - Resource marketplace discovery
#
# =============================================================================
