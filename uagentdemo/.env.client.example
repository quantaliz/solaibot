# =============================================================================
# CLIENT AGENT CONFIGURATION (for client.py)
# =============================================================================
# This configuration file is for the client agent that purchases premium
# resources from the merchant agent using blockchain payments.
#
# Copy this file to .env when running the client:
#   cp .env.client.example .env
#
# IMPORTANT: This project is part of the ASI Agents Track Hackathon
# https://earn.superteam.fun/listing/asi-agents-track/
# =============================================================================

# -----------------------------------------------------------------------------
# Client Agent Identity
# -----------------------------------------------------------------------------
# These settings define your client agent's identity on the uAgent network

CLIENT_NAME=premium_client
# Description: Friendly name for your client agent
# Used in logs and for identification
# Can be any alphanumeric string

CLIENT_SEED=client_seed_phrase_secure_random_input
# Description: Cryptographic seed that determines your client's uAgent address
# IMPORTANT: Keep this secret and unique
# Changing seed = different agent address
# Use a random phrase or UUID for security

CLIENT_NETWORK=testnet
# Description: uAgent network to connect to
# Options:
#   - testnet: Free Fetch.ai testnet (recommended for development)
#   - mainnet: Production Fetch.ai network (requires FET tokens)

# -----------------------------------------------------------------------------
# Client Agent Network Configuration
# -----------------------------------------------------------------------------
# These settings control how your client agent communicates

CLIENT_PORT=8001
# Description: Local port for client agent endpoint
# Default: 8001 (merchant typically uses 8000)
# Note: Must be different from merchant port if running on same machine

CLIENT_ENDPOINT=http://localhost:8001/submit
# Description: HTTP endpoint where client receives messages
# Format: http://HOST:PORT/submit
# For local testing: http://localhost:8001/submit
# For public access: http://YOUR_IP:8001/submit (requires firewall rules)

# -----------------------------------------------------------------------------
# Merchant Configuration
# -----------------------------------------------------------------------------
# CRITICAL: Two different addresses for the merchant!
#
# 1. MERCHANT_UAGENT_ADDRESS: Where to send uAgent messages
#    - This is the uAgent network address (starts with "agent1q...")
#    - For local mode: Use merchant's agent address from merchant.py logs
#    - For Agentverse proxy mode: Use proxy agent address from Agentverse
#
# 2. MERCHANT_AGENT_ADDRESS: Where to send blockchain payments
#    - This is the blockchain wallet address (Solana address or 0x... for EVM)
#    - Found in merchant's .env file or configuration
#    - Payments go to this address on the blockchain

MERCHANT_UAGENT_ADDRESS=agent1qtem7xxuw9w65he0cr35u8r8v3fqhz6qh8qfhfl9u3x04m89t8dasd48sve
# Description: Merchant's uAgent address for sending messages
# REQUIRED: Get this from merchant agent logs when it starts
# Local mode: Look for "Agent address: agent1q..." in merchant.py output
# Proxy mode: Use Agentverse proxy address instead
# Format: agent1q... (70+ characters)

MERCHANT_AGENT_ADDRESS=GDw3EAgyNqv28cn3dH4KuLxxcNPJhunMmx1jBMJTyEAv
# Description: Merchant's blockchain wallet address for payments
# REQUIRED: This is where blockchain payments are sent
# For Solana: Base58-encoded public key (like the example above)
# For EVM: 0x followed by 40 hexadecimal characters
# Must match the MERCHANT_AGENT_ADDRESS in merchant's .env

# -----------------------------------------------------------------------------
# Client Blockchain Wallet Configuration
# -----------------------------------------------------------------------------
# Your client needs a funded blockchain wallet to make payments

CLIENT_WALLET_ADDRESS=YOUR_SOLANA_WALLET_ADDRESS_HERE
# Description: Your Solana wallet public address
# REQUIRED: Replace with your actual Solana wallet address
# Get from: Phantom wallet, Solflare, or generate programmatically
# For testing: Get devnet SOL from https://faucet.solana.com/

CLIENT_WALLET_PRIVATE_KEY=
# Description: Your Solana wallet private key (base58 encoded)
# REQUIRED: Needed to sign transactions
# SECURITY WARNING: Keep this secret! Never commit to version control!
# Format: Base58-encoded private key (87-88 characters)
# Get from: Your wallet's export/backup function
#
# Example (DO NOT USE THIS):
#   CLIENT_WALLET_PRIVATE_KEY=5JvmC5...xyz123
#
# To generate a new wallet programmatically:
#   from solders.keypair import Keypair
#   keypair = Keypair()
#   print(f"Public: {keypair.pubkey()}")
#   print(f"Private: {keypair.secret()}")

# -----------------------------------------------------------------------------
# Payment Network Configuration
# -----------------------------------------------------------------------------

PAYMENT_NETWORK=solana-devnet
# Description: Blockchain network for payments
# Options:
#   - solana-devnet: Solana testnet (recommended for testing)
#     Get free SOL from https://faucet.solana.com/
#   - solana-mainnet: Solana production network (real money)
#   - base-sepolia: Base testnet (requires x402 package)
#   - base-mainnet: Base production network (requires x402 package)
#
# IMPORTANT: Must match merchant's PAYMENT_NETWORK setting

# -----------------------------------------------------------------------------
# Resource Request Configuration
# -----------------------------------------------------------------------------

TARGET_RESOURCE=premium_weather
# Description: Which premium resource to request from merchant
# Available resources (see merchant.py for pricing):
#   - premium_weather: $0.001 - Weather data with forecasts, AQI, UV index
#   - premium_data: 0.01 USDC - Business analytics with insights
#   - premium_api: $0.005 - Premium API access with higher rate limits
#
# The client will automatically request this resource on startup

# =============================================================================
# SETUP INSTRUCTIONS
# =============================================================================
#
# Step 1: Start the Merchant
# ---------------------------
# First, run the merchant agent in local mode:
#   cd /path/to/project
#   cp .env.merchant.example .env
#   # Edit .env with your merchant wallet address
#   uv run src/merchant.py
#
# Copy the agent address from merchant logs:
#   "Agent address: agent1qtem7xxuw9..."
#
# Step 2: Configure This Client
# ------------------------------
# 1. Copy this file:
#    cp .env.client.example .env
#
# 2. Update MERCHANT_UAGENT_ADDRESS with the address from Step 1
#
# 3. Set your Solana wallet:
#    CLIENT_WALLET_ADDRESS=YourSolanaPublicKey
#    CLIENT_WALLET_PRIVATE_KEY=YourSolanaPrivateKey
#
# 4. Fund your wallet with devnet SOL:
#    Visit https://faucet.solana.com/
#    Request SOL for your CLIENT_WALLET_ADDRESS
#
# Step 3: Run the Client
# ----------------------
# uv run src/client.py
#
# Expected flow:
#   1. Client sends ResourceRequest to merchant
#   2. Merchant responds with PaymentRequired (price, payment_id)
#   3. Client creates signed Solana transaction
#   4. Client sends PaymentProof to merchant
#   5. Merchant broadcasts transaction and verifies on Solana
#   6. Merchant sends ResourceAccess with premium data
#   7. Success! Premium resource received
#
# =============================================================================
# USING WITH AGENTVERSE PROXY
# =============================================================================
#
# If merchant is using Agentverse proxy mode:
#
# 1. Merchant runs locally with AGENTVERSE=true
# 2. Proxy runs on Agentverse and forwards messages
# 3. Update MERCHANT_UAGENT_ADDRESS to proxy address (not local merchant)
# 4. Keep MERCHANT_AGENT_ADDRESS as merchant's blockchain wallet
#
# See README-Agentverse.md for detailed proxy setup instructions
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Error: "MERCHANT_UAGENT_ADDRESS not set"
# → Add MERCHANT_UAGENT_ADDRESS from merchant logs
#
# Error: "Wallet address not configured"
# → Set CLIENT_WALLET_ADDRESS to your Solana wallet
#
# Error: "Private key not set"
# → Add CLIENT_WALLET_PRIVATE_KEY from your wallet
#
# Error: "Insufficient funds"
# → Get devnet SOL from https://faucet.solana.com/
#
# Error: "Failed to send request"
# → Verify merchant is running and address is correct
# → Check both agents are on same network (testnet/mainnet)
#
# Error: "Payment verification failed"
# → Verify wallet has sufficient balance
# → Check PAYMENT_NETWORK matches merchant's setting
# → Ensure transaction was broadcast successfully
#
# =============================================================================
# SECURITY BEST PRACTICES
# =============================================================================
#
# ⚠️  NEVER commit .env to version control (already in .gitignore)
# ⚠️  Keep CLIENT_WALLET_PRIVATE_KEY secret
# ⚠️  Use testnet/devnet for development (no real money at risk)
# ⚠️  Generate new wallet for testing (don't reuse production wallets)
# ⚠️  For production: Use hardware wallets or key management systems
#
# =============================================================================
